@import "helpers-spacing";

@function em-separator($list) {
  @if function-exists("list-separator")==true {
    @return list-separator($list);
  }

  $test-list: ();

  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list==$list, space, comma);
}

@function em($values...) {
  $context: nth($values, length($values));
  $result: ();
  $separator: em-separator($values);

  @for $i from 1 through length($values) - 1 {
    $value: nth($values, $i);

    @if type-of($value)=="number"and unit($value)=="px" {
      $result: append($result, $value / $context * 1em, $separator);
    }

    @else if type-of($value)=="list" {
      $result: append($result, em(append($value, $context) ...), $separator);
    }

    @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result)==1, nth($result, 1), $result);
}

@mixin em($properties, $context) {
  @each $property in map-keys($properties) {
    #{$property}: em(append(map-get($properties, $property), $context) ...);
  }
}

// px to rem
@function rem($pixels, $context: $main-font-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}

// усечение текста @include truncate(100%);
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Вертикальный ритм
@mixin offsetY($type, $valueTop, $valueBottom: $valueTop) {
  @if $valueTop !=0 {
    #{$type}-top: $valueTop;
    // @include md(#{$type}-top, $valueTop/1.33333333);
    // @include sm(#{$type}-top, $valueTop/2);
  }

  @if $valueBottom !=0 {
    #{$type}-bottom: $valueBottom;
    // @include md(#{$type}-bottom, $valueBottom/1.33333333);
    // @include sm(#{$type}-bottom, $valueBottom/2);
  }
}


@mixin triangleBottom($size, $color) {
  width: 0;
  height: 0;
  border-style: solid;
  border-width: $size/2 $size/2 0 $size/2;
  border-color: $color transparent transparent transparent;
}

@mixin font($f-name, $f-style, $f-weight, $f-url) {
  @font-face {
      font-family: $f-name;
      font-style: $f-style;
      font-weight: $f-weight;
      font-display: swap;
      src: url($f-url) format("woff");
  }
}

@mixin params($space: rem(60)){
 &__params {
  display: flex;

@include sm-block() {
     height: rem(200);
     &.is-show {
        height: auto;
        padding-bottom: rem(30);
     }
  }  flex-wrap: wrap;

  &-name {
     margin-bottom: rem(12);line-height: 1.3;
  }
  &-value {
     font-size: rem(18);
     font-weight: 700;line-height: 1.3;

     display: flex;

     align-items: center;
     & >span {
        &:not(:last-child) {
           margin-right: rem(8);
        }
     }
  }
  &-item {
     margin: 0 $space rem(30) 0;

@include sm-block() {
        width: 100%;
        margin-right: 0;
        margin-bottom: rem(15);
        padding-bottom: rem(15);

        &:not(:last-child) {
           border-bottom: solid 1px #e3e3e3;
        }
     }

     svg {
        width: rem(20);
        height: rem(20);
        margin-right: rem(10);

        fill: $gray-color;
        flex-shrink: 0;
     }
  }
}
}

@mixin tags($bg : $white-color){
 &__tags {
  display: flex;

  flex-wrap: wrap;
  &:not(:last-child) {
     margin-bottom: rem(35);

@include md-block() {
        margin-bottom: rem(15);
     }
  }
}
&__tag {
  font-size: rem(14);
  line-height: 1.1;

  display: flex;

  height: rem(40);
  margin: 0 rem(15) rem(10) 0;
  padding: 0 rem(17);

  color: #272727;
  border-radius: rem(40);
  background: $bg;

  align-items: center;
  svg {
     width: rem(22);
     height: rem(22);
     margin-right: rem(10);

     fill: $primary-color;
     flex-shrink: 0;
  }
}
}
@mixin table(){
 &__table {
  &-list {
   
     li {
        line-height: 1.15;

        display: flex;

@include notebookLg-block() {
           font-size: rem(14);
        }  align-items: center;

        &:not(:last-child) {
           margin-bottom: rem(20);
        }
     }

     &-value {
        font-weight: 500;

        position: relative;

        display: flex;

        justify-content: flex-end;
        flex-grow: 1;
        align-items: flex-end;
        span {
           display: block;

           text-align: right;
        }
        &:before {
           display: block;

           margin: 0 rem(10);

           content: '';

           border-bottom: 1px dashed $gray-color;

           flex-grow: 1;
        }
     }
  }
}
}